/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.User;
import static ui.CreatePanel.isValidAge;
import static ui.CreatePanel.isValidName;
import util.DatabaseConnector;

/**
 *
 * @author HP PC
 */
public class ViewPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewPanel
     */
    
    private ArrayList<User> users;
    private User selectedUser;
    
    
    public ViewPanel() {
        initComponents();
        populateTable();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        viewTable = new javax.swing.JTable();
        exportButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        editnameTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        editageTextField = new javax.swing.JTextField();
        saveButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(153, 153, 255));

        viewTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Age"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        viewTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(viewTable);
        if (viewTable.getColumnModel().getColumnCount() > 0) {
            viewTable.getColumnModel().getColumn(0).setResizable(false);
            viewTable.getColumnModel().getColumn(1).setResizable(false);
            viewTable.getColumnModel().getColumn(2).setResizable(false);
        }

        exportButton.setText("EXPORT");

        deleteButton.setText("DELETE");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        editButton.setText("EDIT");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Name:");

        jLabel2.setText("Age:");

        saveButton.setText("SAVE");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(245, 245, 245)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(exportButton)
                        .addGap(36, 36, 36)
                        .addComponent(deleteButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 63, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(editnameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                            .addComponent(editageTextField))
                        .addGap(77, 77, 77))))
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(72, 72, 72)
                                .addComponent(saveButton)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(editButton)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(exportButton)
                            .addComponent(deleteButton))
                        .addGap(49, 49, 49)
                        .addComponent(editButton)
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(editnameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(editageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(saveButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(71, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        User newUser = new User();
        try
        {
            boolean validInput = true;
            if(!isValidName(editnameTextField.getText()))
            {
                validInput = false;
                JOptionPane.showMessageDialog(this, "Invalid input for Name. Please update and resubmit."  );
            }
            if(!editageTextField.getText().equals("")) 
            {
                if(!isValidAge(Integer.parseInt(editageTextField.getText())))
                {
                    validInput = false;
                    JOptionPane.showMessageDialog(this, "Invalid Age. Please update and resubmit."  );
                }
            }
            else
            {
                validInput = false;
                JOptionPane.showMessageDialog(this, "Age cannot be empty. Please update and resubmit."  );
            }
            if (validInput)
            {
                newUser.setAge(Integer.parseInt(editageTextField.getText()));
                newUser.setName(editnameTextField.getText());

                DatabaseConnector.editUser(selectedUser, newUser);
                JOptionPane.showMessageDialog(null, "User Updated Successfully","Successful Edit",JOptionPane.INFORMATION_MESSAGE);
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Invalid input for Name/Age. Please update and save again."  );
            }
            clearFields();
            populateTable();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        int selectedIndex = viewTable.getSelectedRow();
        if(selectedIndex == -1)
        {
            JOptionPane.showMessageDialog(this, "Please select a user to delete", "Cannot delete User", JOptionPane.OK_OPTION);
        }
        try
        {
            selectedUser = users.get(selectedIndex);
            DatabaseConnector.deleteUser(selectedUser);
             JOptionPane.showMessageDialog(null, selectedUser.getName() + " Deleted Successfully", "Successfully Deleted", JOptionPane.INFORMATION_MESSAGE);
             clearFields();
             populateTable();
        }
        catch(Exception e)
        {
            if(selectedIndex != -1)
            {
                JOptionPane.showMessageDialog(this, e.getMessage());
            }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        int selectedIndex = viewTable.getSelectedRow();
        if(selectedIndex == -1)
        {
            JOptionPane.showMessageDialog(this, "Please select a user to edit", "Cannot edit User", JOptionPane.INFORMATION_MESSAGE);
        }
        selectedUser = users.get(selectedIndex);
        editnameTextField.setText(selectedUser.getName());
        editageTextField.setText(Integer.toString(selectedUser.getAge()));
        
    }//GEN-LAST:event_editButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton editButton;
    private javax.swing.JTextField editageTextField;
    private javax.swing.JTextField editnameTextField;
    private javax.swing.JButton exportButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton saveButton;
    private javax.swing.JTable viewTable;
    // End of variables declaration//GEN-END:variables

    public void populateTable()
    {
        try
        {
            this.users = DatabaseConnector.getAllusers();
            DefaultTableModel model = (DefaultTableModel) viewTable.getModel();
            model.setRowCount(0);
            for(User u : users)
            {
                Object[] row = new Object[3];
                row[0] = u.getId();
                row[1] = u.getName();
                row[2] = u.getAge();
                model.addRow(row);
            }
            clearFields();
            
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }
    
    private void clearFields()
    {
        editnameTextField.setText("");
        editageTextField.setText("");
        selectedUser = null;
    }
    
        /** 
     * validate name field
     * @param Name
     */
    public static boolean isValidName(String Name) {
        // is null or empty
        if (Name == null || Name.trim().isEmpty()) {
            return false;
        }

        // input length 
        if (Name.length() > 25) {
            return false;
        }

        // input validation using regular expression
        String regex = "^[a-zA-Z]+$"; 
        Pattern ipPattern = Pattern.compile(regex);
        Matcher ipMatcher = ipPattern.matcher(Name);

        return ipMatcher.matches();
    }
    
    /**
     * validate age field
     * @param userAge
     * @return 
     */
        public static boolean isValidAge(int userAge) {
        try
        {
            int maxAge =100;
            int age = userAge;

            if(age < 0 || age > maxAge)
            {
                return false;
            }
            else
            {
                return true;
            }
        }
        catch (NumberFormatException ex) 
        {
            return false;
        }
        
    }

}
